1. Identify the source and destination boxes.
●	Scan through the list of boxes to find which contains the source point. Do this as well for the destination point. 
●   Instead of returning a list indicating that you haven’t visited any boxes, return a list of these two boxes.

# Ben's notes: For this, just loop over all the numbers to get the source and destinations within

2. Implement the simplest complete search algorithm you can.
●	Starting with the source box, run breadth-first search looking for a sequence of boxes that reaches the destination box. 
●   If no such path can be found, make sure your program can report this correctly (such as by printing out “No path!” in the console). 
●   To earn the point, the “No path!” message needs to only show when there really isn’t a path. 
●   Complete search algorithms buy us the ability to report this confidently.  You can also use this to evaluate your A* outputs!

# Ben's notes:
Amir Patel's A* stuff: https://www.redblobgames.com/pathfinding/a-star/introduction.html

frontier = Queue()
frontier.put(start)
reached = set()
reached.add(start)

while not frontier.empty():
   current = frontier.get()
   for next in graph.neighbors(current):
      if next not in reached:
         frontier.put(next)
         reached.add(next)



3. Modify your simple search to compute a legal list of line segments demonstrating the path.
●	Instead of doing your search purely at the box level, add an extra table (dict) to keep track of the precise x,y position within that box that your path with traverse. 
●   In the solution code, we call this table 'detail_points', a dictionary the maps boxes to (x,y) pairs. 

# Ben's Notes:
Think of this as you're the NPC now navigating between line segments to get to your destination.

X:

If the X of your current point is less than the min X of the next box, go right to the min X of the next box.
ELSE
If the X of your current point is GREATER than the max X of the next box, go left to the max X of the next box. 
ELSE
If the X of your current point is BETWEEN the min and max X of the next box, don't change your X at all, just the Y.

Y:

If the Y of your current point is less than the min Y of the next box (y1), go DOWN to the min Y of the next box.
ELSE
If the Y of your current point is GREATER than the max Y of the next box (y2), go left to the max Y of the next box. 
ELSE
If the X of your current point is BETWEEN the min and max Y of the next box, don't change your Y at all, just the X.

4. Modify the supplied Dijkstra's implementation into an A* implementation.
●	Find the part of the code that puts new cells/boxes into the priority queue.
   
   # Ben's Notes: It's on line 37 of Dijkstra_forward_search.py!
   # Helper function will be made right now.

●	Instead of using the new distance (distance to u plus length of edge u--v) as the priority for insertion, 
   augment this with (add to it) an estimate of the distance remaining. 
   # Ben's Notes: We calculate this! On line 44, currently

   If you already produced a helper function to measure the Euclidean distance between two detail points, 
   you can use this function to measure the distance between the new detail point and the final destination point.

●	When you are dequeuing boxes from the priority queue, remember that their priority value is not a distance. 
   You'll have to recover the true distance to the just-dequeued box by looking it up in your distance table.
   # Ben's Notes: "distance table" is currently unknown.

●	To make sure A* is implemented correctly, try to find a path along a straight vertical or horizontal hallway. 
   The A* algorithm should mostly visit boxes between the two points. 
   Dijkstra's however, will also explore in the opposite direction of the destination point up to the radius at which it found the destination. 
   In the example Homer map, there is a nice vertical hallway just outside of the circular chamber at the top-right.   
